<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gbuffer = surface_create(window_get_width(), window_get_height());
lightBuffer = surface_create(window_get_width(), window_get_height());
combinedBuffer = surface_create(window_get_width(), window_get_height());
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//lighting pass
surface_reset_target();
surface_set_target(lightBuffer);
shader_set(shd_light);
draw_set_blend_mode(bm_add);
var u_color = shader_get_uniform(shd_light, "u_color");
var u_scale = shader_get_uniform(shd_light, "u_scale");
var lightCount = instance_number(objLight);
for(var i = 0; i &lt; lightCount; ++i)
{
    var light = instance_find(objLight, i);
    
    //TODO(max): Store these in the lights themself
    var range = light.range; 
    var color = light.color;
    
    var radius = range * 1 / (power(0.98, 1/3) * power(.02, 1/3));
    
    var lx = light.x;
    var ly = light.y;
        
    shader_set_uniform_f(u_color, color[0], color[1], color[2]);
    shader_set_uniform_f(u_scale, radius / range);
    
    draw_primitive_begin(pr_trianglefan);
    draw_vertex_color(lx - radius, ly - radius, c_black, 0);
    draw_vertex_color(lx + radius, ly - radius, c_white, 0);
    draw_vertex_color(lx + radius, ly + radius, c_white, 1);
    draw_vertex_color(lx - radius, ly + radius, c_black, 1);
    draw_primitive_end();
}
draw_set_blend_mode(bm_normal);


//apply lighting using gbuffer and lighting buffer
surface_reset_target();
surface_set_target(combinedBuffer);
shader_set(shd_combine);
var u_lightTex = shader_get_sampler_index(shd_combine, "u_lightTex");
texture_set_stage(u_lightTex, surface_get_texture(lightBuffer));
draw_surface(gbuffer, 0, 0);




//draw gbuffer to the screen with post processing shader
surface_reset_target();
shader_set(shd_pp); //bind post-processing shader
var u_time = shader_get_uniform(shd_pp, "u_time");
var u_intensity = shader_get_uniform(shd_pp, "u_intensity");
shader_set_uniform_f(u_time, current_time / 1000);
shader_set_uniform_f(u_intensity, (sin(current_time / 1000) * .5 + 1.0) * 25.0 + 5);
draw_surface(combinedBuffer, 0, 0); //draw g-buffer to screen


shader_reset(); //reset shader binding



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surface_set_target(lightBuffer);
draw_clear(c_black);
surface_reset_target();

surface_set_target(gbuffer); //set g-buffer as render target

if(background_showcolor)
    draw_clear(background_color); //clear the g-buffer to the background color

//draw backgrounds to the g-buffer
for(var i = 0; i &lt; 8; ++i)
{
    //skip invisible backgrounds and foregrounds
    if(!background_visible[i] &amp;&amp; !background_foreground[i])
        continue;
    
    if(background_vtiled[i] || background_htiled[i])    
        draw_background_tiled(background_index[i], background_x[i], background_y[i]);
    else
        draw_background(background_index[i], background_x[i], background_y[i]);
        
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="65">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//resize gbuffer to the window size
surface_resize(gbuffer, window_get_width(), window_get_height());
surface_resize(lightBuffer, window_get_width(), window_get_height());
surface_resize(combinedBuffer, window_get_width(), window_get_height());
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>game_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
